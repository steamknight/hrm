/// <reference path="../typings/tsd.d.ts"/>
/// <reference path="../typings/ant.d.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var events = require('events');
(function (Constants) {
    Constants[Constants["MESSAGE_TX_SYNC"] = 0xA4] = "MESSAGE_TX_SYNC";
    Constants[Constants["DEFAULT_NETWORK_NUMBER"] = 0x00] = "DEFAULT_NETWORK_NUMBER";
    // Configuration messages
    Constants[Constants["MESSAGE_CHANNEL_UNASSIGN"] = 0x41] = "MESSAGE_CHANNEL_UNASSIGN";
    Constants[Constants["MESSAGE_CHANNEL_ASSIGN"] = 0x42] = "MESSAGE_CHANNEL_ASSIGN";
    Constants[Constants["MESSAGE_CHANNEL_ID"] = 0x51] = "MESSAGE_CHANNEL_ID";
    Constants[Constants["MESSAGE_CHANNEL_PERIOD"] = 0x43] = "MESSAGE_CHANNEL_PERIOD";
    Constants[Constants["MESSAGE_CHANNEL_SEARCH_TIMEOUT"] = 0x44] = "MESSAGE_CHANNEL_SEARCH_TIMEOUT";
    Constants[Constants["MESSAGE_CHANNEL_FREQUENCY"] = 0x45] = "MESSAGE_CHANNEL_FREQUENCY";
    Constants[Constants["MESSAGE_CHANNEL_TX_POWER"] = 0x60] = "MESSAGE_CHANNEL_TX_POWER";
    Constants[Constants["MESSAGE_NETWORK_KEY"] = 0x46] = "MESSAGE_NETWORK_KEY";
    Constants[Constants["MESSAGE_TX_POWER"] = 0x47] = "MESSAGE_TX_POWER";
    Constants[Constants["MESSAGE_PROXIMITY_SEARCH"] = 0x71] = "MESSAGE_PROXIMITY_SEARCH";
    Constants[Constants["MESSAGE_ENABLE_RX_EXT"] = 0x66] = "MESSAGE_ENABLE_RX_EXT";
    Constants[Constants["MESSAGE_CHANNEL_OPEN_RX_SCAN"] = 0x5B] = "MESSAGE_CHANNEL_OPEN_RX_SCAN";
    // Notification messages
    Constants[Constants["MESSAGE_STARTUP"] = 0x6F] = "MESSAGE_STARTUP";
    // Control messages
    Constants[Constants["MESSAGE_SYSTEM_RESET"] = 0x4A] = "MESSAGE_SYSTEM_RESET";
    Constants[Constants["MESSAGE_CHANNEL_OPEN"] = 0x4B] = "MESSAGE_CHANNEL_OPEN";
    Constants[Constants["MESSAGE_CHANNEL_CLOSE"] = 0x4C] = "MESSAGE_CHANNEL_CLOSE";
    Constants[Constants["MESSAGE_CHANNEL_REQUEST"] = 0x4D] = "MESSAGE_CHANNEL_REQUEST";
    // Data messages
    Constants[Constants["MESSAGE_CHANNEL_BROADCAST_DATA"] = 0x4E] = "MESSAGE_CHANNEL_BROADCAST_DATA";
    Constants[Constants["MESSAGE_CHANNEL_ACKNOWLEDGED_DATA"] = 0x4F] = "MESSAGE_CHANNEL_ACKNOWLEDGED_DATA";
    Constants[Constants["MESSAGE_CHANNEL_BURST_DATA"] = 0x50] = "MESSAGE_CHANNEL_BURST_DATA";
    // Channel event messages
    Constants[Constants["MESSAGE_CHANNEL_EVENT"] = 0x40] = "MESSAGE_CHANNEL_EVENT";
    // Requested response messages
    Constants[Constants["MESSAGE_CHANNEL_STATUS"] = 0x52] = "MESSAGE_CHANNEL_STATUS";
    //MESSAGE_CHANNEL_ID = 0x51,
    Constants[Constants["MESSAGE_VERSION"] = 0x3E] = "MESSAGE_VERSION";
    Constants[Constants["MESSAGE_CAPABILITIES"] = 0x54] = "MESSAGE_CAPABILITIES";
    Constants[Constants["MESSAGE_SERIAL_NUMBER"] = 0x61] = "MESSAGE_SERIAL_NUMBER";
    // Message parameters
    Constants[Constants["CHANNEL_TYPE_TWOWAY_RECEIVE"] = 0x00] = "CHANNEL_TYPE_TWOWAY_RECEIVE";
    Constants[Constants["CHANNEL_TYPE_TWOWAY_TRANSMIT"] = 0x10] = "CHANNEL_TYPE_TWOWAY_TRANSMIT";
    Constants[Constants["CHANNEL_TYPE_SHARED_RECEIVE"] = 0x20] = "CHANNEL_TYPE_SHARED_RECEIVE";
    Constants[Constants["CHANNEL_TYPE_SHARED_TRANSMIT"] = 0x30] = "CHANNEL_TYPE_SHARED_TRANSMIT";
    Constants[Constants["CHANNEL_TYPE_ONEWAY_RECEIVE"] = 0x40] = "CHANNEL_TYPE_ONEWAY_RECEIVE";
    Constants[Constants["CHANNEL_TYPE_ONEWAY_TRANSMIT"] = 0x50] = "CHANNEL_TYPE_ONEWAY_TRANSMIT";
    Constants[Constants["RADIO_TX_POWER_MINUS20DB"] = 0x00] = "RADIO_TX_POWER_MINUS20DB";
    Constants[Constants["RADIO_TX_POWER_MINUS10DB"] = 0x01] = "RADIO_TX_POWER_MINUS10DB";
    Constants[Constants["RADIO_TX_POWER_0DB"] = 0x02] = "RADIO_TX_POWER_0DB";
    Constants[Constants["RADIO_TX_POWER_PLUS4DB"] = 0x03] = "RADIO_TX_POWER_PLUS4DB";
    Constants[Constants["RESPONSE_NO_ERROR"] = 0x00] = "RESPONSE_NO_ERROR";
    Constants[Constants["EVENT_RX_SEARCH_TIMEOUT"] = 0x01] = "EVENT_RX_SEARCH_TIMEOUT";
    Constants[Constants["EVENT_RX_FAIL"] = 0x02] = "EVENT_RX_FAIL";
    Constants[Constants["EVENT_TX"] = 0x03] = "EVENT_TX";
    Constants[Constants["EVENT_TRANSFER_RX_FAILED"] = 0x04] = "EVENT_TRANSFER_RX_FAILED";
    Constants[Constants["EVENT_TRANSFER_TX_COMPLETED"] = 0x05] = "EVENT_TRANSFER_TX_COMPLETED";
    Constants[Constants["EVENT_TRANSFER_TX_FAILED"] = 0x06] = "EVENT_TRANSFER_TX_FAILED";
    Constants[Constants["EVENT_CHANNEL_CLOSED"] = 0x07] = "EVENT_CHANNEL_CLOSED";
    Constants[Constants["EVENT_RX_FAIL_GO_TO_SEARCH"] = 0x08] = "EVENT_RX_FAIL_GO_TO_SEARCH";
    Constants[Constants["EVENT_CHANNEL_COLLISION"] = 0x09] = "EVENT_CHANNEL_COLLISION";
    Constants[Constants["EVENT_TRANSFER_TX_START"] = 0x0A] = "EVENT_TRANSFER_TX_START";
    Constants[Constants["CHANNEL_IN_WRONG_STATE"] = 0x15] = "CHANNEL_IN_WRONG_STATE";
    Constants[Constants["CHANNEL_NOT_OPENED"] = 0x16] = "CHANNEL_NOT_OPENED";
    Constants[Constants["CHANNEL_ID_NOT_SET"] = 0x18] = "CHANNEL_ID_NOT_SET";
    Constants[Constants["CLOSE_ALL_CHANNELS"] = 0x19] = "CLOSE_ALL_CHANNELS";
    Constants[Constants["TRANSFER_IN_PROGRESS"] = 0x1F] = "TRANSFER_IN_PROGRESS";
    Constants[Constants["TRANSFER_SEQUENCE_NUMBER_ERROR"] = 0x20] = "TRANSFER_SEQUENCE_NUMBER_ERROR";
    Constants[Constants["TRANSFER_IN_ERROR"] = 0x21] = "TRANSFER_IN_ERROR";
    Constants[Constants["MESSAGE_SIZE_EXCEEDS_LIMIT"] = 0x27] = "MESSAGE_SIZE_EXCEEDS_LIMIT";
    Constants[Constants["INVALID_MESSAGE"] = 0x28] = "INVALID_MESSAGE";
    Constants[Constants["INVALID_NETWORK_NUMBER"] = 0x29] = "INVALID_NETWORK_NUMBER";
    Constants[Constants["INVALID_LIST_ID"] = 0x30] = "INVALID_LIST_ID";
    Constants[Constants["INVALID_SCAN_TX_CHANNEL"] = 0x31] = "INVALID_SCAN_TX_CHANNEL";
    Constants[Constants["INVALID_PARAMETER_PROVIDED"] = 0x33] = "INVALID_PARAMETER_PROVIDED";
    Constants[Constants["EVENT_QUEUE_OVERFLOW"] = 0x35] = "EVENT_QUEUE_OVERFLOW";
    Constants[Constants["USB_STRING_WRITE_FAIL"] = 0x70] = "USB_STRING_WRITE_FAIL";
    Constants[Constants["CHANNEL_STATE_UNASSIGNED"] = 0x00] = "CHANNEL_STATE_UNASSIGNED";
    Constants[Constants["CHANNEL_STATE_ASSIGNED"] = 0x01] = "CHANNEL_STATE_ASSIGNED";
    Constants[Constants["CHANNEL_STATE_SEARCHING"] = 0x02] = "CHANNEL_STATE_SEARCHING";
    Constants[Constants["CHANNEL_STATE_TRACKING"] = 0x03] = "CHANNEL_STATE_TRACKING";
    Constants[Constants["CAPABILITIES_NO_RECEIVE_CHANNELS"] = 0x01] = "CAPABILITIES_NO_RECEIVE_CHANNELS";
    Constants[Constants["CAPABILITIES_NO_TRANSMIT_CHANNELS"] = 0x02] = "CAPABILITIES_NO_TRANSMIT_CHANNELS";
    Constants[Constants["CAPABILITIES_NO_RECEIVE_MESSAGES"] = 0x04] = "CAPABILITIES_NO_RECEIVE_MESSAGES";
    Constants[Constants["CAPABILITIES_NO_TRANSMIT_MESSAGES"] = 0x08] = "CAPABILITIES_NO_TRANSMIT_MESSAGES";
    Constants[Constants["CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES"] = 0x10] = "CAPABILITIES_NO_ACKNOWLEDGED_MESSAGES";
    Constants[Constants["CAPABILITIES_NO_BURST_MESSAGES"] = 0x20] = "CAPABILITIES_NO_BURST_MESSAGES";
    Constants[Constants["CAPABILITIES_NETWORK_ENABLED"] = 0x02] = "CAPABILITIES_NETWORK_ENABLED";
    Constants[Constants["CAPABILITIES_SERIAL_NUMBER_ENABLED"] = 0x08] = "CAPABILITIES_SERIAL_NUMBER_ENABLED";
    Constants[Constants["CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED"] = 0x10] = "CAPABILITIES_PER_CHANNEL_TX_POWER_ENABLED";
    Constants[Constants["CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED"] = 0x20] = "CAPABILITIES_LOW_PRIORITY_SEARCH_ENABLED";
    Constants[Constants["CAPABILITIES_SCRIPT_ENABLED"] = 0x40] = "CAPABILITIES_SCRIPT_ENABLED";
    Constants[Constants["CAPABILITIES_SEARCH_LIST_ENABLED"] = 0x80] = "CAPABILITIES_SEARCH_LIST_ENABLED";
    Constants[Constants["CAPABILITIES_LED_ENABLED"] = 0x01] = "CAPABILITIES_LED_ENABLED";
    Constants[Constants["CAPABILITIES_EXT_MESSAGE_ENABLED"] = 0x02] = "CAPABILITIES_EXT_MESSAGE_ENABLED";
    Constants[Constants["CAPABILITIES_SCAN_MODE_ENABLED"] = 0x04] = "CAPABILITIES_SCAN_MODE_ENABLED";
    Constants[Constants["CAPABILITIES_PROX_SEARCH_ENABLED"] = 0x10] = "CAPABILITIES_PROX_SEARCH_ENABLED";
    Constants[Constants["CAPABILITIES_EXT_ASSIGN_ENABLED"] = 0x20] = "CAPABILITIES_EXT_ASSIGN_ENABLED";
    Constants[Constants["CAPABILITIES_FS_ANTFS_ENABLED"] = 0x40] = "CAPABILITIES_FS_ANTFS_ENABLED";
    Constants[Constants["TIMEOUT_NEVER"] = 0xFF] = "TIMEOUT_NEVER";
})(exports.Constants || (exports.Constants = {}));
var Constants = exports.Constants;
var Messages = (function () {
    function Messages() {
    }
    Messages.resetSystem = function () {
        var payload = [];
        payload.push(0x00);
        return this.buildMessage(payload, 74 /* MESSAGE_SYSTEM_RESET */);
    };
    Messages.requestMessage = function (channel, messageID) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        payload.push(messageID);
        return this.buildMessage(payload, 77 /* MESSAGE_CHANNEL_REQUEST */);
    };
    Messages.setNetworkKey = function () {
        var payload = [];
        payload.push(0 /* DEFAULT_NETWORK_NUMBER */);
        payload.push(0xB9);
        payload.push(0xA5);
        payload.push(0x21);
        payload.push(0xFB);
        payload.push(0xBD);
        payload.push(0x72);
        payload.push(0xC3);
        payload.push(0x45);
        return this.buildMessage(payload, 70 /* MESSAGE_NETWORK_KEY */);
    };
    Messages.assignChannel = function (channel, type) {
        if (type === void 0) { type = 'receive'; }
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        if (type === 'receive') {
            payload.push(0 /* CHANNEL_TYPE_TWOWAY_RECEIVE */);
        }
        else if (type === 'receive_only') {
            payload.push(64 /* CHANNEL_TYPE_ONEWAY_RECEIVE */);
        }
        else if (type === 'receive_shared') {
            payload.push(32 /* CHANNEL_TYPE_SHARED_RECEIVE */);
        }
        else if (type === 'transmit') {
            payload.push(16 /* CHANNEL_TYPE_TWOWAY_TRANSMIT */);
        }
        else if (type === 'transmit_only') {
            payload.push(80 /* CHANNEL_TYPE_ONEWAY_TRANSMIT */);
        }
        else if (type === 'transmit_shared') {
            payload.push(48 /* CHANNEL_TYPE_SHARED_TRANSMIT */);
        }
        else {
            throw 'type not allowed';
        }
        payload.push(0 /* DEFAULT_NETWORK_NUMBER */);
        return this.buildMessage(payload, 66 /* MESSAGE_CHANNEL_ASSIGN */);
    };
    Messages.setDevice = function (channel, deviceID, deviceType, transmissionType) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        payload = payload.concat(this.intToLEHexArray(deviceID, 2));
        payload = payload.concat(this.intToLEHexArray(deviceType));
        payload = payload.concat(this.intToLEHexArray(transmissionType));
        return this.buildMessage(payload, 81 /* MESSAGE_CHANNEL_ID */);
    };
    Messages.searchChannel = function (channel, timeout) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        payload = payload.concat(this.intToLEHexArray(timeout));
        return this.buildMessage(payload, 68 /* MESSAGE_CHANNEL_SEARCH_TIMEOUT */);
    };
    Messages.setPeriod = function (channel, period) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        payload = payload.concat(this.intToLEHexArray(period));
        return this.buildMessage(payload, 67 /* MESSAGE_CHANNEL_PERIOD */);
    };
    Messages.setFrequency = function (channel, frequency) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        payload = payload.concat(this.intToLEHexArray(frequency));
        return this.buildMessage(payload, 69 /* MESSAGE_CHANNEL_FREQUENCY */);
    };
    Messages.setRxExt = function () {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(0));
        payload = payload.concat(this.intToLEHexArray(1));
        return this.buildMessage(payload, 102 /* MESSAGE_ENABLE_RX_EXT */);
    };
    Messages.openRxScan = function () {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(0));
        payload = payload.concat(this.intToLEHexArray(1));
        return this.buildMessage(payload, 91 /* MESSAGE_CHANNEL_OPEN_RX_SCAN */);
    };
    Messages.openChannel = function (channel) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        return this.buildMessage(payload, 75 /* MESSAGE_CHANNEL_OPEN */);
    };
    Messages.closeChannel = function (channel) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        return this.buildMessage(payload, 76 /* MESSAGE_CHANNEL_CLOSE */);
    };
    Messages.unassignChannel = function (channel) {
        var payload = [];
        payload = payload.concat(this.intToLEHexArray(channel));
        return this.buildMessage(payload, 65 /* MESSAGE_CHANNEL_UNASSIGN */);
    };
    Messages.buildMessage = function (payload, msgID) {
        if (payload === void 0) { payload = []; }
        if (msgID === void 0) { msgID = 0x00; }
        var m = [];
        m.push(164 /* MESSAGE_TX_SYNC */);
        m.push(payload.length);
        m.push(msgID);
        payload.forEach(function (byte) {
            m.push(byte);
        });
        m.push(this.getChecksum(m));
        return new Buffer(m);
    };
    Messages.intToLEHexArray = function (int, numBytes) {
        if (numBytes === void 0) { numBytes = 1; }
        numBytes = numBytes || 1;
        var a = [];
        var b = new Buffer(this.decimalToHex(int, numBytes * 2), 'hex');
        var i = b.length - 1;
        while (i >= 0) {
            a.push(b[i]);
            i--;
        }
        return a;
    };
    Messages.decimalToHex = function (d, numDigits) {
        var hex = Number(d).toString(16);
        numDigits = numDigits || 2;
        while (hex.length < numDigits) {
            hex = '0' + hex;
        }
        // console.log(hex);
        return hex;
    };
    Messages.getChecksum = function (message) {
        var checksum = 0;
        message.forEach(function (byte) {
            checksum = (checksum ^ byte) % 0xFF;
        });
        return checksum;
    };
    Messages.BUFFER_INDEX_MSG_LEN = 1;
    Messages.BUFFER_INDEX_MSG_TYPE = 2;
    Messages.BUFFER_INDEX_CHANNEL_NUM = 3;
    Messages.BUFFER_INDEX_MSG_DATA = 4;
    return Messages;
})();
exports.Messages = Messages;
var USBDriver = (function (_super) {
    __extends(USBDriver, _super);
    function USBDriver(idVendor, idProduct, dbgLevel) {
        if (dbgLevel === void 0) { dbgLevel = 0; }
        _super.call(this);
        this.idVendor = idVendor;
        this.idProduct = idProduct;
        this.usb = require('usb');
        this.usedChannels = 0;
        this.attachedSensors = [];
        this.maxChannels = 0;
        this.usb.setDebugLevel(dbgLevel);
    }
    USBDriver.prototype.open = function () {
        var _this = this;
        this.device = this.usb.findByIds(this.idVendor, this.idProduct);
        if (!this.device) {
            return false;
        }
        this.device.open();
        this.iface = this.device.interfaces[0];
        this.iface.claim();
        this.inEp = this.iface.endpoints[0];
        this.inEp.on('data', function (data) {
            if (_this.leftover) {
                data = Buffer.concat([_this.leftover, data]);
                _this.leftover = null;
            }
            if (data.readUInt8(0) !== 0xA4) {
                throw 'SYNC missing';
            }
            var len = data.length;
            var beginBlock = 0;
            while (beginBlock < len) {
                if (beginBlock + 1 === len) {
                    _this.leftover = data.slice(beginBlock);
                    break;
                }
                var block_len = data.readUInt8(beginBlock + 1);
                var endBlock = beginBlock + block_len + 4;
                if (endBlock > len) {
                    _this.leftover = data.slice(beginBlock);
                    break;
                }
                var readData = data.slice(beginBlock, endBlock);
                _this.read(readData);
                beginBlock = endBlock;
            }
        });
        this.inEp.on('error', function (err) {
            //console.log('ERROR RECV: ', err);
        });
        this.inEp.on('end', function () {
            //console.log('STOP RECV');
        });
        this.inEp.startPoll();
        this.outEp = this.iface.endpoints[1];
        this.reset();
        return true;
    };
    USBDriver.prototype.close = function () {
        var _this = this;
        this.detach_all();
        this.inEp.stopPoll();
        this.device.reset(function () {
            _this.device.close();
            _this.emit('shutdown');
        });
    };
    USBDriver.prototype.reset = function () {
        this.detach_all();
        this.maxChannels = 0;
        this.usedChannels = 0;
        this.write(Messages.resetSystem());
    };
    USBDriver.prototype.isScanning = function () {
        return this.usedChannels === -1;
    };
    USBDriver.prototype.attach = function (sensor, forScan) {
        if (this.usedChannels < 0) {
            return false;
        }
        if (forScan) {
            if (this.usedChannels !== 0) {
                return false;
            }
            this.usedChannels = -1;
        }
        else {
            if (this.maxChannels <= this.usedChannels) {
                return false;
            }
            ++this.usedChannels;
        }
        this.attachedSensors.push(sensor);
        return true;
    };
    USBDriver.prototype.detach = function (sensor) {
        var idx = this.attachedSensors.indexOf(sensor);
        if (idx < 0) {
            return false;
        }
        if (this.usedChannels < 0) {
            this.usedChannels = 0;
        }
        else {
            --this.usedChannels;
        }
        this.attachedSensors.splice(idx, 1);
        return true;
    };
    USBDriver.prototype.detach_all = function () {
        var copy = this.attachedSensors;
        copy.forEach(function (sensor) { return sensor.detach(); });
    };
    USBDriver.prototype.write = function (data) {
        //console.log('DATA SEND: ', data);
        this.outEp.transfer(data, function (error) {
            if (error) {
            }
        });
    };
    USBDriver.prototype.read = function (data) {
        //console.log('DATA RECV: ', data);
        var messageID = data.readUInt8(2);
        if (messageID === 111 /* MESSAGE_STARTUP */) {
            this.write(Messages.requestMessage(0, 84 /* MESSAGE_CAPABILITIES */));
        }
        else if (messageID === 84 /* MESSAGE_CAPABILITIES */) {
            this.maxChannels = data.readUInt8(4);
            this.write(Messages.setNetworkKey());
        }
        else if (messageID === 64 /* MESSAGE_CHANNEL_EVENT */ && data.readUInt8(4) === 70 /* MESSAGE_NETWORK_KEY */) {
            this.emit('startup', data);
        }
        else {
            this.emit('read', data);
        }
    };
    return USBDriver;
})(events.EventEmitter);
var GarminStick2 = (function (_super) {
    __extends(GarminStick2, _super);
    function GarminStick2(dbgLevel) {
        if (dbgLevel === void 0) { dbgLevel = 0; }
        _super.call(this, 0x0fcf, 0x1008, dbgLevel);
    }
    return GarminStick2;
})(USBDriver);
exports.GarminStick2 = GarminStick2;
var GarminStick3 = (function (_super) {
    __extends(GarminStick3, _super);
    function GarminStick3(dbgLevel) {
        if (dbgLevel === void 0) { dbgLevel = 0; }
        _super.call(this, 0x0fcf, 0x1009, dbgLevel);
    }
    return GarminStick3;
})(USBDriver);
exports.GarminStick3 = GarminStick3;
var BaseSensor = (function (_super) {
    __extends(BaseSensor, _super);
    function BaseSensor(stick) {
        _super.call(this);
        this.stick = stick;
        stick.on('read', this.handleEventMessages.bind(this));
    }
    BaseSensor.prototype.scan = function (type, frequency) {
        var _this = this;
        if (this.channel !== undefined) {
            throw 'already attached';
        }
        var channel = 0;
        var onStatus = function (status) {
            switch (status.msg) {
                case 0x01: {
                    switch (status.code) {
                        case 7 /* EVENT_CHANNEL_CLOSED */: {
                            _this.write(Messages.unassignChannel(channel));
                            break;
                        }
                    }
                    break;
                }
                case 66 /* MESSAGE_CHANNEL_ASSIGN */: {
                    _this.write(Messages.setDevice(channel, 0, 0, 0));
                    break;
                }
                case 81 /* MESSAGE_CHANNEL_ID */: {
                    _this.write(Messages.setFrequency(channel, frequency));
                    break;
                }
                case 69 /* MESSAGE_CHANNEL_FREQUENCY */: {
                    _this.write(Messages.setRxExt());
                    break;
                }
                case 102 /* MESSAGE_ENABLE_RX_EXT */: {
                    _this.write(Messages.openRxScan());
                    break;
                }
                case 91 /* MESSAGE_CHANNEL_OPEN_RX_SCAN */: {
                    if (_this.decodeDataCbk) {
                        _this.stick.on('read', _this.decodeDataCbk);
                    }
                    process.nextTick(function () { return _this.emit('attached'); });
                    break;
                }
                case 76 /* MESSAGE_CHANNEL_CLOSE */: {
                    break;
                }
                case 65 /* MESSAGE_CHANNEL_UNASSIGN */: {
                    _this.removeListener('status', onStatus);
                    _this.channel = undefined;
                    if (_this.decodeDataCbk) {
                        _this.stick.removeListener('read', _this.decodeDataCbk);
                    }
                    process.nextTick(function () { return _this.emit('detached'); });
                    break;
                }
            }
        };
        if (this.stick.isScanning()) {
            this.channel = channel;
            this.deviceID = 0;
            this.transmissionType = 0;
            this.on('status', onStatus);
            if (this.decodeDataCbk) {
                this.stick.on('read', this.decodeDataCbk);
            }
            process.nextTick(function () { return _this.emit('attached'); });
        }
        else if (this.stick.attach(this, true)) {
            this.channel = channel;
            this.deviceID = 0;
            this.transmissionType = 0;
            this.on('status', onStatus);
            this.write(Messages.assignChannel(channel, type));
        }
        else {
            throw 'cannot attach';
        }
    };
    BaseSensor.prototype.attach = function (channel, type, deviceID, deviceType, transmissionType, timeout, period, frequency) {
        var _this = this;
        if (this.channel !== undefined) {
            throw 'already attached';
        }
        if (!this.stick.attach(this, false)) {
            throw 'cannot attach';
        }
        this.channel = channel;
        this.deviceID = deviceID;
        this.transmissionType = transmissionType;
        var onStatus = function (status) {
            switch (status.msg) {
                case 0x01: {
                    switch (status.code) {
                        case 7 /* EVENT_CHANNEL_CLOSED */: {
                            _this.write(Messages.unassignChannel(channel));
                            break;
                        }
                    }
                    break;
                }
                case 66 /* MESSAGE_CHANNEL_ASSIGN */: {
                    _this.write(Messages.setDevice(channel, deviceID, deviceType, transmissionType));
                    break;
                }
                case 81 /* MESSAGE_CHANNEL_ID */: {
                    _this.write(Messages.searchChannel(channel, timeout));
                    break;
                }
                case 68 /* MESSAGE_CHANNEL_SEARCH_TIMEOUT */: {
                    _this.write(Messages.setFrequency(channel, frequency));
                    break;
                }
                case 69 /* MESSAGE_CHANNEL_FREQUENCY */: {
                    _this.write(Messages.setPeriod(channel, period));
                    break;
                }
                case 67 /* MESSAGE_CHANNEL_PERIOD */: {
                    _this.write(Messages.openChannel(channel));
                    break;
                }
                case 75 /* MESSAGE_CHANNEL_OPEN */: {
                    if (_this.decodeDataCbk) {
                        _this.stick.on('read', _this.decodeDataCbk);
                    }
                    process.nextTick(function () { return _this.emit('attached'); });
                    break;
                }
                case 76 /* MESSAGE_CHANNEL_CLOSE */: {
                    break;
                }
                case 65 /* MESSAGE_CHANNEL_UNASSIGN */: {
                    _this.removeListener('status', onStatus);
                    _this.channel = undefined;
                    if (_this.decodeDataCbk) {
                        _this.stick.removeListener('read', _this.decodeDataCbk);
                    }
                    process.nextTick(function () { return _this.emit('detached'); });
                    break;
                }
            }
        };
        this.on('status', onStatus);
        this.write(Messages.assignChannel(channel, type));
    };
    BaseSensor.prototype.detach = function () {
        if (this.channel === undefined) {
            return;
        }
        this.write(Messages.closeChannel(this.channel));
        if (!this.stick.detach(this)) {
            throw 'error detaching';
        }
    };
    BaseSensor.prototype.write = function (data) {
        this.stick.write(data);
    };
    BaseSensor.prototype.handleEventMessages = function (data) {
        var messageID = data.readUInt8(2);
        if (messageID === 64 /* MESSAGE_CHANNEL_EVENT */ && data.readUInt8(3) === this.channel) {
            var status = {
                msg: data.readUInt8(4),
                code: data.readUInt8(5)
            };
            this.emit('status', status);
        }
    };
    return BaseSensor;
})(events.EventEmitter);
var AntPlusBaseSensor = (function (_super) {
    __extends(AntPlusBaseSensor, _super);
    function AntPlusBaseSensor() {
        _super.apply(this, arguments);
    }
    AntPlusBaseSensor.prototype.scan = function (type) {
        return _super.prototype.scan.call(this, type, 57);
    };
    AntPlusBaseSensor.prototype.attach = function (channel, type, deviceID, deviceType, transmissionType, timeout, period) {
        return _super.prototype.attach.call(this, channel, type, deviceID, deviceType, transmissionType, timeout, period, 57);
    };
    return AntPlusBaseSensor;
})(BaseSensor);
exports.AntPlusBaseSensor = AntPlusBaseSensor;
var AntPlusSensor = (function (_super) {
    __extends(AntPlusSensor, _super);
    function AntPlusSensor() {
        _super.apply(this, arguments);
    }
    AntPlusSensor.prototype.scan = function () {
        throw 'scanning unsupported';
    };
    AntPlusSensor.prototype.attach = function (channel, type, deviceID, deviceType, transmissionType, timeout, period) {
        return _super.prototype.attach.call(this, channel, type, deviceID, deviceType, transmissionType, timeout, period);
    };
    return AntPlusSensor;
})(AntPlusBaseSensor);
exports.AntPlusSensor = AntPlusSensor;
var AntPlusScanner = (function (_super) {
    __extends(AntPlusScanner, _super);
    function AntPlusScanner() {
        _super.apply(this, arguments);
    }
    AntPlusScanner.prototype.scan = function (type) {
        return _super.prototype.scan.call(this, type);
    };
    AntPlusScanner.prototype.attach = function () {
        throw 'attach unsupported';
    };
    return AntPlusScanner;
})(AntPlusBaseSensor);
exports.AntPlusScanner = AntPlusScanner;

//# sourceMappingURL=ant.js.map