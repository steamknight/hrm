/// <reference path="../typings/tsd.d.ts"/>
/// <reference path="../typings/ant.d.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Ant = require('./ant');
var Constants = Ant.Constants;
var Messages = Ant.Messages;
var StrideSpeedDistanceSensorState = (function () {
    function StrideSpeedDistanceSensorState(deviceId) {
        this.DeviceID = deviceId;
    }
    return StrideSpeedDistanceSensorState;
})();
var PageState;
(function (PageState) {
    PageState[PageState["INIT_PAGE"] = 0] = "INIT_PAGE";
    PageState[PageState["STD_PAGE"] = 1] = "STD_PAGE";
    PageState[PageState["EXT_PAGE"] = 2] = "EXT_PAGE";
})(PageState || (PageState = {}));
var StrideSpeedDistanceSensor = (function (_super) {
    __extends(StrideSpeedDistanceSensor, _super);
    function StrideSpeedDistanceSensor(stick) {
        _super.call(this, stick);
        this.decodeDataCbk = this.decodeData.bind(this);
    }
    StrideSpeedDistanceSensor.prototype.attach = function (channel, deviceID) {
        _super.prototype.attach.call(this, channel, 'receive', deviceID, StrideSpeedDistanceSensor.deviceType, 0, 255, 8134);
        this.state = new StrideSpeedDistanceSensorState(deviceID);
    };
    StrideSpeedDistanceSensor.prototype.decodeData = function (data) {
        if (data.readUInt8(Messages.BUFFER_INDEX_CHANNEL_NUM) !== this.channel) {
            return;
        }
        switch (data.readUInt8(Messages.BUFFER_INDEX_MSG_TYPE)) {
            case 78 /* MESSAGE_CHANNEL_BROADCAST_DATA */:
            case 79 /* MESSAGE_CHANNEL_ACKNOWLEDGED_DATA */:
            case 80 /* MESSAGE_CHANNEL_BURST_DATA */:
                {
                    if (this.deviceID === 0) {
                        this.write(Messages.requestMessage(this.channel, 81 /* MESSAGE_CHANNEL_ID */));
                    }
                    var page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);
                    if (page === 1) {
                        this.state.TimeFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);
                        this.state.TimeInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);
                        this.state.DistanceInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);
                        this.state.DistanceFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;
                        this.state.SpeedInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0F;
                        this.state.SpeedFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);
                        this.state.StrideCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);
                        this.state.UpdateLatency = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);
                    }
                    else if (page >= 2 && page <= 15) {
                        this.state.CadenceInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);
                        this.state.CadenceFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;
                        this.state.SpeedInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0F;
                        this.state.SpeedFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);
                        this.state.Status = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);
                        switch (page) {
                            case 3:
                                {
                                    this.state.Calories = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);
                                    break;
                                }
                        }
                    }
                    this.emit('ssddata', this.state);
                }
                break;
            case 81 /* MESSAGE_CHANNEL_ID */:
                {
                    this.deviceID = data.readUInt16LE(Messages.BUFFER_INDEX_MSG_DATA);
                    this.transmissionType = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);
                    this.state.DeviceID = this.deviceID;
                }
                break;
        }
    };
    StrideSpeedDistanceSensor.deviceType = 124;
    return StrideSpeedDistanceSensor;
})(Ant.AntPlusSensor);
exports.StrideSpeedDistanceSensor = StrideSpeedDistanceSensor;
var StrideSpeedDistanceScanner = (function (_super) {
    __extends(StrideSpeedDistanceScanner, _super);
    function StrideSpeedDistanceScanner(stick) {
        _super.call(this, stick);
        this.states = {};
        this.decodeDataCbk = this.decodeData.bind(this);
    }
    StrideSpeedDistanceScanner.prototype.scan = function () {
        _super.prototype.scan.call(this, 'receive');
    };
    StrideSpeedDistanceScanner.prototype.decodeData = function (data) {
        var msglen = data.readUInt8(Messages.BUFFER_INDEX_MSG_LEN);
        var extMsgBegin = msglen - 2;
        if (data.readUInt8(extMsgBegin) !== 0x80) {
            console.log('wrong message format');
            return;
        }
        var deviceId = data.readUInt16LE(extMsgBegin + 1);
        var deviceType = data.readUInt8(extMsgBegin + 3);
        if (deviceType !== StrideSpeedDistanceScanner.deviceType) {
            return;
        }
        if (!this.states[deviceId]) {
            this.states[deviceId] = new StrideSpeedDistanceSensorState(deviceId);
        }
        switch (data.readUInt8(Messages.BUFFER_INDEX_MSG_TYPE)) {
            case 78 /* MESSAGE_CHANNEL_BROADCAST_DATA */:
            case 79 /* MESSAGE_CHANNEL_ACKNOWLEDGED_DATA */:
            case 80 /* MESSAGE_CHANNEL_BURST_DATA */:
                {
                    var page = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA);
                    if (page === 1) {
                        this.states[deviceId].TimeFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 1);
                        this.states[deviceId].TimeInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 2);
                        this.states[deviceId].DistanceInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);
                        this.states[deviceId].DistanceFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;
                        this.states[deviceId].SpeedInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0F;
                        this.states[deviceId].SpeedFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);
                        this.states[deviceId].StrideCount = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);
                        this.states[deviceId].UpdateLatency = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);
                    }
                    else if (page >= 2 && page <= 15) {
                        this.states[deviceId].CadenceInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 3);
                        this.states[deviceId].CadenceFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;
                        this.states[deviceId].SpeedInteger = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0F;
                        this.states[deviceId].SpeedFractional = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 5);
                        this.states[deviceId].Status = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 7);
                        switch (page) {
                            case 3:
                                {
                                    this.states[deviceId].Calories = data.readUInt8(Messages.BUFFER_INDEX_MSG_DATA + 6);
                                    break;
                                }
                        }
                    }
                    this.emit('ssddata', this.states[deviceId]);
                }
                break;
        }
    };
    StrideSpeedDistanceScanner.deviceType = 124;
    return StrideSpeedDistanceScanner;
})(Ant.AntPlusScanner);
exports.StrideSpeedDistanceScanner = StrideSpeedDistanceScanner;

//# sourceMappingURL=stride-speed-distance-sensors.js.map